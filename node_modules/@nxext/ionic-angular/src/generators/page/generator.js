"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pageSchematic = exports.pageGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const path = require("path");
const update_routing_file_1 = require("./lib/update-routing-file");
function normalizeOptions(tree, options) {
    const { appsDir, npmScope } = (0, devkit_1.getWorkspaceLayout)(tree);
    const projectRoot = `${appsDir}/${options.project}`;
    return Object.assign(Object.assign({}, options), { projectRoot, prefix: npmScope });
}
function addFiles(tree, options) {
    const templateOptions = Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.name)), { name: (0, devkit_1.names)(options.name).fileName, offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot), template: '' });
    const pageDir = options.directory
        ? path.join(options.projectRoot, `/src/app/${options.directory}/${(0, devkit_1.names)(options.name).fileName}`)
        : path.join(options.projectRoot, `/src/app/${(0, devkit_1.names)(options.name).fileName}`);
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files'), pageDir, templateOptions);
}
function pageGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const normalizedOptions = normalizeOptions(tree, options);
        addFiles(tree, normalizedOptions);
        (0, update_routing_file_1.updateAppRoutingModule)(tree, normalizedOptions);
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.pageGenerator = pageGenerator;
exports.default = pageGenerator;
exports.pageSchematic = (0, devkit_1.convertNxGenerator)(pageGenerator);
//# sourceMappingURL=generator.js.map