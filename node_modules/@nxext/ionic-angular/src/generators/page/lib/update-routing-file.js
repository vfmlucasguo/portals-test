"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateAppRoutingModule = void 0;
const devkit_1 = require("@nrwl/devkit");
const file_utils_1 = require("@nrwl/workspace/src/core/file-utils");
const tsquery_1 = require("@phenomnomnominal/tsquery");
const path = require("path");
function updateAppRoutingModule(tree, options) {
    const appRoutingModuleFilePath = path.join(options.projectRoot, `/src/app/app-routing.module.ts`);
    const appRoutingModule = (0, file_utils_1.readFileIfExisting)(appRoutingModuleFilePath);
    if (appRoutingModule !== '') {
        const newContents = tsquery_1.tsquery.replace(appRoutingModule, 'VariableStatement', (node) => {
            let modifiedNode = node.getFullText();
            const vsNode = node;
            vsNode.declarationList.declarations.forEach((declaration) => {
                const typeNode = declaration.type;
                const identifier = typeNode.typeName;
                if (identifier.escapedText === 'Routes') {
                    const pageNames = (0, devkit_1.names)(options.name);
                    const importPath = options.directory
                        ? `./${options.directory}/${pageNames.fileName}/${pageNames.fileName}.module`
                        : `./${pageNames.fileName}/${pageNames.fileName}.module`;
                    const toInsert = `{
              path: '${pageNames.fileName}',
              loadChildren: () =>
                import('${importPath}').then((m) => m.${pageNames.className}PageModule),
            },
            `;
                    const arrLiteral = declaration.initializer;
                    if (arrLiteral.elements.length > 0) {
                        const nodeArray = arrLiteral.elements;
                        const insertPosition = nodeArray[0].getStart();
                        const previousRoutes = vsNode.getFullText();
                        const prefix = previousRoutes.substring(0, insertPosition);
                        const suffix = previousRoutes.substring(insertPosition);
                        const newRoutes = `${prefix}${toInsert}${suffix}`;
                        modifiedNode = newRoutes;
                    }
                }
            });
            return modifiedNode;
        });
        if (newContents !== appRoutingModule) {
            tree.write(appRoutingModuleFilePath, newContents);
        }
    }
}
exports.updateAppRoutingModule = updateAppRoutingModule;
//# sourceMappingURL=update-routing-file.js.map