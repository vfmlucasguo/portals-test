package com.capacitorjs.portals;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.getcapacitor.JSArray;
import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginConfig;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;
import io.ionic.liveupdates.LiveUpdate;
import io.ionic.liveupdates.LiveUpdateManager;
import io.ionic.liveupdates.network.FailStep;
import io.ionic.liveupdates.network.SyncCallback;
import java.util.List;
import java.util.Map;
import org.json.JSONException;

@CapacitorPlugin(name = "Portals")
public class PortalsPlugin extends Plugin {

    @Override
    public void load() {
        PluginConfig config = getConfig();
        init(config);
    }

    public void init(PluginConfig pluginConfig) {
        LiveUpdateManager.initialize(getContext());

        PortalsConfig config = PortalsConfig.create(pluginConfig);
        Integer maxVersions = null;

        LiveUpdateConfig shellConfig = config.getShellApp().getLiveUpdateConfig();
        if (shellConfig != null) {
            LiveUpdate liveUpdate = new LiveUpdate(shellConfig.getAppId(), shellConfig.getChannel());
            LiveUpdateManager.cleanVersions(getContext(), liveUpdate.getAppId());
            LiveUpdateManager.addLiveUpdateInstance(getContext(), liveUpdate);

            if (shellConfig.getAutoUpdateMethod().equalsIgnoreCase("background")) {
                LiveUpdateManager.sync(getContext(), new String[] { liveUpdate.getAppId() });
            }

            Integer shellMaxVersion = shellConfig.getMaxVersions();
            if (shellMaxVersion != null) {
                maxVersions = shellMaxVersion;
            }
        }

        for (Map.Entry<String, PortalApp> appEntry : config.getApps().entrySet()) {
            PortalApp app = appEntry.getValue();
            LiveUpdateConfig appConfig = app.getLiveUpdateConfig();
            if (appConfig != null) {
                LiveUpdate liveUpdate = new LiveUpdate(appConfig.getAppId(), appConfig.getChannel());
                LiveUpdateManager.addLiveUpdateInstance(getContext(), liveUpdate);

                if (appConfig.getAutoUpdateMethod().equalsIgnoreCase("background")) {
                    LiveUpdateManager.sync(getContext(), new String[] { liveUpdate.getAppId() });
                }

                Integer appConfigMaxVersions = appConfig.getMaxVersions();
                if (appConfigMaxVersions != null) {
                    if (maxVersions == null) {
                        maxVersions = appConfigMaxVersions;
                    } else {
                        maxVersions = Math.max(maxVersions, appConfigMaxVersions);
                    }
                }
            }
        }

        if (maxVersions != null) {
            LiveUpdateManager.INSTANCE.setMaxVersions(maxVersions);
        }
    }

    @PluginMethod
    public void reload(final PluginCall call) {
        bridge.reload();
        call.resolve();
    }

    @PluginMethod
    public void syncOne(final PluginCall call) {
        String appId = call.getString("appId");
        if (appId != null) {
            LiveUpdateManager.sync(
                getContext(),
                appId,
                new SyncCallback() {
                    @Override
                    public void onAppComplete(@NonNull LiveUpdate liveUpdate, @Nullable FailStep failStep, @Nullable String failMsg) {
                        JSObject returnObj = new JSObject();
                        returnObj.put("appId", liveUpdate.getAppId());

                        if (failStep != null) {
                            returnObj.put("failStep", failStep);
                            returnObj.put("message", "Live Update failed on " + failStep + " step. Reason: " + failMsg);
                        } else {
                            returnObj.put("channel", liveUpdate.getChannelName());
                        }

                        call.resolve(returnObj);
                    }

                    @Override
                    public void onSyncComplete() {
                        // DO Nothing
                    }
                }
            );
        } else {
            JSObject returnObj = new JSObject();
            returnObj.put("failStep", FailStep.CHECK.name());
            returnObj.put("message", "Live Update failed because appId was not provided");
            call.resolve(returnObj);
        }
    }

    @PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)
    public void syncAll(final PluginCall call) {
        call.setKeepAlive(true);
        LiveUpdateManager.sync(
            getContext(),
            new String[] {},
            true,
            new SyncCallback() {
                @Override
                public void onAppComplete(@NonNull LiveUpdate liveUpdate, @Nullable FailStep failStep, @Nullable String failMsg) {
                    JSObject returnObj = new JSObject();
                    returnObj.put("appId", liveUpdate.getAppId());

                    if (failStep != null) {
                        returnObj.put("failStep", failStep.name());
                        returnObj.put("message", "Live Update failed on " + failStep + " step. Reason: " + failMsg);
                    } else {
                        returnObj.put("channel", liveUpdate.getChannelName());
                    }

                    call.resolve(returnObj);
                }

                @Override
                public void onSyncComplete() {
                    JSObject complete = new JSObject();
                    complete.put("complete", true);
                    call.resolve(complete);
                    call.release(getBridge());
                }
            }
        );
    }

    @PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)
    public void syncSome(final PluginCall call) {
        call.setKeepAlive(true);
        JSArray appIds = call.getArray("appIds");
        try {
            List<String> appIdList = appIds.toList();
            LiveUpdateManager.sync(
                getContext(),
                appIdList.toArray(new String[0]),
                true,
                new SyncCallback() {
                    @Override
                    public void onAppComplete(@NonNull LiveUpdate liveUpdate, @Nullable FailStep failStep, @Nullable String failMsg) {
                        JSObject returnObj = new JSObject();
                        returnObj.put("appId", liveUpdate.getAppId());

                        if (failStep != null) {
                            returnObj.put("failStep", failStep.name());
                            returnObj.put("message", "Live Update failed on " + failStep + " step. Reason: " + failMsg);
                        } else {
                            returnObj.put("channel", liveUpdate.getChannelName());
                        }

                        call.resolve(returnObj);
                    }

                    @Override
                    public void onSyncComplete() {
                        JSObject complete = new JSObject();
                        complete.put("complete", true);
                        call.resolve(complete);
                        call.release(getBridge());
                    }
                }
            );
        } catch (JSONException e) {
            e.printStackTrace();
            JSObject returnObj = new JSObject();
            returnObj.put("failStep", FailStep.CHECK.name());
            returnObj.put("message", "Live Update JSON Error: Could not interpret appIds");
            call.resolve(returnObj);
        }
    }
}
