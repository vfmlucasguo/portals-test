package com.capacitorjs.portals;

import com.getcapacitor.PluginConfig;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class PortalsConfig {

    private PortalApp shellApp;
    private final Map<String, PortalApp> apps = new HashMap<>();

    public PortalApp getShellApp() {
        return shellApp;
    }

    public void setShellApp(PortalApp shellApp) {
        this.shellApp = shellApp;
    }

    public Map<String, PortalApp> getApps() {
        return apps;
    }

    public void addApp(PortalApp portalApp) {
        apps.put(portalApp.getName(), portalApp);
    }

    public static PortalsConfig create(PluginConfig config) {
        PortalsConfig portalsConfig = new PortalsConfig();

        try {
            JSONObject shellApp = config.getConfigJSON().getJSONObject("shell");
            String shellAppName = shellApp.getString("name");
            String shellAppDir = shellApp.getString("webDir");

            PortalApp shellPortalApp = new PortalApp();
            shellPortalApp.setName(shellAppName);
            shellPortalApp.setWebDir(shellAppDir);

            if (shellApp.has("liveUpdateConfig")) {
                LiveUpdateConfig liveUpdateConfig = parseLiveUpdateConfig(shellApp);
                shellPortalApp.setLiveUpdateConfig(liveUpdateConfig);
            }

            portalsConfig.setShellApp(shellPortalApp);

            JSONArray configApps = config.getConfigJSON().getJSONArray("apps");
            for (int i = 0; i < configApps.length(); i++) {
                if (configApps.get(i) instanceof JSONObject) {
                    JSONObject app = configApps.getJSONObject(i);
                    String appName = app.getString("name");
                    String appWebDir = app.getString("webDir");

                    PortalApp portalApp = new PortalApp();
                    portalApp.setName(appName);
                    portalApp.setWebDir(appWebDir);

                    if (app.has("liveUpdateConfig")) {
                        LiveUpdateConfig liveUpdateConfig = parseLiveUpdateConfig(app);
                        portalApp.setLiveUpdateConfig(liveUpdateConfig);
                    }

                    portalsConfig.addApp(portalApp);
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return portalsConfig;
    }

    private static LiveUpdateConfig parseLiveUpdateConfig(JSONObject app) {
        try {
            JSONObject liveUpdateJson = app.getJSONObject("liveUpdateConfig");
            LiveUpdateConfig liveUpdateConfig = new LiveUpdateConfig();
            String appId = liveUpdateJson.getString("appId");
            String channel = liveUpdateJson.getString("channel");
            String autoUpdateMethod = liveUpdateJson.getString("autoUpdateMethod");
            Integer maxVersions = null;

            if (liveUpdateJson.has("maxVersions")) {
                maxVersions = liveUpdateJson.getInt("maxVersions");
            }

            liveUpdateConfig.setAppId(appId);
            liveUpdateConfig.setChannel(channel);
            liveUpdateConfig.setAutoUpdateMethod(autoUpdateMethod);
            if (maxVersions != null) {
                liveUpdateConfig.setMaxVersions(maxVersions);
            }

            return liveUpdateConfig;
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return null;
    }
}
