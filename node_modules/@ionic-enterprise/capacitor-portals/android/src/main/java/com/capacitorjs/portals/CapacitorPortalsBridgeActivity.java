package com.capacitorjs.portals;

import com.getcapacitor.BridgeActivity;
import com.getcapacitor.Logger;
import com.getcapacitor.PluginConfig;
import com.getcapacitor.ProcessedRoute;
import com.getcapacitor.RouteProcessor;
import io.ionic.liveupdates.LiveUpdateManager;
import java.io.File;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class CapacitorPortalsBridgeActivity extends BridgeActivity {

    Map<String, File> appLiveUpdatePaths = new HashMap<>();
    File shellLiveUpdatePath;

    PortalsConfig portalsConfig;

    /**
     * Overridden load() method constructs a Bridge with a RouteProcessor.
     */
    @Override
    protected void load() {
        Logger.debug("Starting CapacitorPortalsBridgeActivity");

        RouteProcessor routeProcessor = implementRouteProcessor();

        bridge = bridgeBuilder.addPlugins(initialPlugins).setConfig(config).setRouteProcessor(routeProcessor).create();

        this.keepRunning = bridge.shouldKeepRunning();
        this.onNewIntent(getIntent());

        // Read in Capacitor Portals Config
        portalsConfig = PortalsConfig.create(getConfigSettings());

        // Prepopulate shell app live update path if present
        LiveUpdateConfig shellLiveUpdateConfig = portalsConfig.getShellApp().getLiveUpdateConfig();
        if (shellLiveUpdateConfig != null) {
            String shellAppId = shellLiveUpdateConfig.getAppId();
            if (shellAppId != null) {
                shellLiveUpdatePath = LiveUpdateManager.getLatestAppDirectory(CapacitorPortalsBridgeActivity.this, shellAppId);
            }
        }

        // Prepopulate app live update path(s) if present
        Map<String, PortalApp> portalApps = portalsConfig.getApps();
        for (Map.Entry<String, PortalApp> entry : portalApps.entrySet()) {
            LiveUpdateConfig appLiveUpdateConfig = entry.getValue().getLiveUpdateConfig();
            if (appLiveUpdateConfig != null) {
                File appLiveUpdatePath = LiveUpdateManager.getLatestAppDirectory(
                    CapacitorPortalsBridgeActivity.this,
                    appLiveUpdateConfig.getAppId()
                );
                appLiveUpdatePaths.put(entry.getKey(), appLiveUpdatePath);
            }
        }
    }

    /**
     *
     * @return
     */
    private RouteProcessor implementRouteProcessor() {
        return (basePath, path) -> {
            ProcessedRoute processedRoute = new ProcessedRoute();
            String shellAppName = portalsConfig.getShellApp().getName();

            String[] pathParts = path.split("/");
            if (pathParts.length == 0) {
                if (shellLiveUpdatePath != null) {
                    processedRoute.setPath(shellLiveUpdatePath + path);
                    processedRoute.setAsset(false);
                } else {
                    processedRoute.setPath(basePath + "/" + shellAppName + path);
                    processedRoute.setAsset(true);
                }
            } else {
                PortalApp route = portalsConfig.getApps().get(pathParts[1]);

                if (route == null) {
                    if (shellLiveUpdatePath != null) {
                        processedRoute.setPath(shellLiveUpdatePath + path);
                        processedRoute.setAsset(false);
                    } else {
                        processedRoute.setPath(basePath + "/" + shellAppName + path);
                        processedRoute.setAsset(true);
                    }
                } else {
                    File appLiveUpdatePath = appLiveUpdatePaths.get(route.getName());

                    if (appLiveUpdatePath != null) {
                        processedRoute.setPath(appLiveUpdatePath + "/" + joinString(Arrays.copyOfRange(pathParts, 2, pathParts.length)));
                        processedRoute.setAsset(false);
                    } else {
                        processedRoute.setPath(
                            basePath + "/" + route.getName() + "/" + joinString(Arrays.copyOfRange(pathParts, 2, pathParts.length))
                        );
                        processedRoute.setAsset(true);
                    }
                }
            }

            return processedRoute;
        };
    }

    /**
     * Get the properties for this plugin.
     *
     * @return The properties for Capacitor Portals plugin.
     */
    private PluginConfig getConfigSettings() {
        return bridge.getConfig().getPluginConfiguration("Portals");
    }

    /**
     *
     * @param arr
     * @return
     */
    private static String joinString(String[] arr) {
        if (null == arr || 0 == arr.length) return "";

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(arr[0]);

        for (int i = 1; i < arr.length; i++) {
            stringBuilder.append("/").append(arr[i]);
        }

        return stringBuilder.toString();
    }
}
