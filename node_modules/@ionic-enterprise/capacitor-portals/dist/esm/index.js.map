{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAIjD,MAAM,OAAO,GAAG,cAAc,CAAyB,SAAS,CAAC,CAAC;AAElE,MAAM,CAAC,MAAM,MAAM,GAAG,GAAkB,EAAE;IACxC,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,KAAK,EAAE,OAAuB,EAAuB,EAAE;IAC5E,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC9C,IAAI,UAAU,IAAI,MAAM,EAAE;QACxB,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC/B;SAAM;QACL,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAChC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,QAAsB,EAAQ,EAAE;IACtD,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE;QAC7B,IAAI,UAAU,IAAI,MAAM,EAAE;YACxB,QAAQ,CAAC,cAAc,EAAE,CAAC;SAC3B;aAAM,IAAI,UAAU,IAAI,MAAM,EAAE;YAC/B,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC1B;aAAM;YACL,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SAChC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,OAAwB,EAAE,QAAsB,EAAQ,EAAE;IACjF,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE;QACnC,IAAI,UAAU,IAAI,MAAM,EAAE;YACxB,QAAQ,CAAC,cAAc,EAAE,CAAC;SAC3B;aAAM,IAAI,UAAU,IAAI,MAAM,EAAE;YAC/B,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC1B;aAAM;YACL,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SAChC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,cAAc,eAAe,CAAC;AAC9B,OAAO,EAAE,OAAO,EAAE,CAAC","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type { CapacitorPortalsPlugin, SyncCallback, SyncOneOptions, SyncSomeOptions, LiveUpdate } from './definitions';\n\nconst Portals = registerPlugin<CapacitorPortalsPlugin>('Portals');\n\nexport const reload = (): Promise<void> => {\n  return Portals.reload();\n};\n\nexport const syncOne = async (options: SyncOneOptions): Promise<LiveUpdate> => {\n  const result = await Portals.syncOne(options);\n  if ('failStep' in result) {\n    return Promise.reject(result);\n  } else {\n    return Promise.resolve(result);\n  }\n};\n\nexport const syncAll = (callback: SyncCallback): void => {\n  Portals.syncAll({}, (result) => {\n    if ('complete' in result) {\n      callback.onSyncComplete();\n    } else if ('failStep' in result) {\n      callback.onError(result);\n    } else {\n      callback.onAppComplete(result);\n    }\n  });\n};\n\nexport const syncSome = (options: SyncSomeOptions, callback: SyncCallback): void => {\n  Portals.syncSome(options, (result) => {\n    if ('complete' in result) {\n      callback.onSyncComplete();\n    } else if ('failStep' in result) {\n      callback.onError(result);\n    } else {\n      callback.onAppComplete(result);\n    }\n  });\n};\n\nexport * from './definitions';\nexport { Portals };\n"]}