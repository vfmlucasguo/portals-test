declare module '@capacitor/cli' {
    interface PluginsConfig {
        /**
         * These config values are available:
         */
        Portals?: {
            /**
             * The name of the container web app used with Capacitor Portals
             *
             * @since 1.0.0
             * @default "shell"
             * @example "myshellapp"
             */
            shell: Portal;
            /**
             * The name of the container web app used with Capacitor Portals
             *
             * @since 1.0.0
             */
            apps: Portal[];
        };
    }
}
export interface Portal {
    name: string;
    webDir: string;
    liveUpdateConfig?: LiveUpdateConfig;
}
export interface LiveUpdateConfig {
    appId: string;
    channel: string;
    autoUpdateMethod: AutoUpdateMethod;
    maxVersions?: number;
}
export declare type AutoUpdateMethod = 'none' | 'background';
export declare type LiveUpdate = Pick<LiveUpdateConfig, 'appId' | 'channel'>;
export interface LiveUpdateError {
    appId?: string;
    failStep: 'CHECK' | 'DOWNLOAD' | 'UNPACK' | 'UPDATE' | 'CANCEL';
    message: string;
}
export declare type LiveUpdateResult = LiveUpdate | LiveUpdateError;
export interface SyncCallback {
    onError: (error: LiveUpdateError) => void;
    onAppComplete: (liveUpdate: LiveUpdate) => void;
    onSyncComplete: () => void;
}
export declare type SyncResult = LiveUpdateResult | {
    complete: true;
};
export interface SyncOneOptions {
    appId: string;
}
export interface SyncSomeOptions {
    appIds: string[];
}
export interface CapacitorPortalsPlugin {
    /**
     * Reload the webview
     */
    reload(): Promise<void>;
    /**
     * Sync One
     */
    syncOne(options: SyncOneOptions): Promise<LiveUpdateResult>;
    /**
     * Sync All
     */
    syncAll(options: any, callback?: (result: SyncResult) => void): Promise<void>;
    /**
     * Sync Some
     */
    syncSome(options: SyncSomeOptions, callback?: (result: SyncResult) => void): Promise<void>;
}
