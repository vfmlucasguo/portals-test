{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * These config values are available:\n     */\n    Portals?: {\n      /**\n       * The name of the container web app used with Capacitor Portals\n       *\n       * @since 1.0.0\n       * @default \"shell\"\n       * @example \"myshellapp\"\n       */\n      shell: Portal;\n\n      /**\n       * The name of the container web app used with Capacitor Portals\n       *\n       * @since 1.0.0\n       */\n      apps: Portal[];\n    };\n  }\n}\n\nexport interface Portal {\n  name: string;\n  webDir: string;\n  liveUpdateConfig?: LiveUpdateConfig;\n}\n\nexport interface LiveUpdateConfig {\n  appId: string;\n  channel: string;\n  autoUpdateMethod: AutoUpdateMethod;\n  maxVersions?: number;\n}\n\nexport type AutoUpdateMethod = 'none' | 'background';\n\nexport type LiveUpdate = Pick<LiveUpdateConfig, 'appId' | 'channel'>;\n\nexport interface LiveUpdateError {\n  appId?: string;\n  failStep: 'CHECK' | 'DOWNLOAD' | 'UNPACK' | 'UPDATE' | 'CANCEL';\n  message: string;\n}\n\nexport type LiveUpdateResult = LiveUpdate | LiveUpdateError;\n\nexport interface SyncCallback {\n  onError: (error: LiveUpdateError) => void;\n  onAppComplete: (liveUpdate: LiveUpdate) => void;\n  onSyncComplete: () => void;\n}\n\nexport type SyncResult = LiveUpdateResult | { complete: true };\n\nexport interface SyncOneOptions {\n  appId: string;\n}\n\nexport interface SyncSomeOptions {\n  appIds: string[];\n}\n\nexport interface CapacitorPortalsPlugin {\n  /**\n   * Reload the webview\n   */\n  reload(): Promise<void>;\n\n  /**\n   * Sync One\n   */\n  syncOne(options: SyncOneOptions): Promise<LiveUpdateResult>;\n\n  /**\n   * Sync All\n   */\n  syncAll(options: any, callback?: (result: SyncResult) => void): Promise<void>;\n\n  /**\n   * Sync Some\n   */\n  syncSome(options: SyncSomeOptions, callback?: (result: SyncResult) => void): Promise<void>;\n}\n"]}