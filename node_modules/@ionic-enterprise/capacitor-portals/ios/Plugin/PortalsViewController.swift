//
//  PortalsViewController.swift
//  Plugin
//
//  Created by Steven Sherry on 3/31/22.
//  Copyright Â© 2022 Max Lynch. All rights reserved.
//

import Capacitor
import IonicLiveUpdates

public final class PortalsViewController: CAPBridgeViewController {
    internal lazy var federatedRouter: FederatedRouter = {
        guard let capConfigUrl = Bundle.main.url(forResource: "capacitor.config", withExtension: "json")
        else { fatalError("Unable to find capacitor.config.json, make sure it exists.") }

        guard
            let data = try? Data(contentsOf: capConfigUrl),
            let config = try? JSONDecoder().decode(Config.self, from: data)
        else { fatalError("Unable to parse capacitor.config.json. Make sure it's valid JSON.") }

        let shell = config.plugins.federation.shell
        let apps = config.plugins.federation
            .apps
            .reduce(into: [String: Portal]()) { acc, next in
                acc[next.name] = next
            }

        let routes = Portals(shell: shell, apps: apps)
        return FederatedRouter(routes: routes)
    }()

    override public func router() -> Router { federatedRouter }

    override public func capacitorDidLoad() {
        guard let plugin = bridge?.plugin(withName: "Portals") as? PortalsPlugin,
              let portals = plugin.portals
        else { fatalError("Whoopsie") }

        federatedRouter.routes = portals
        // TODO: Uncomment this when https://github.com/ionic-team/capacitor/pull/5630 is in the next Capacitor release
        federatedRouter.updateRoutesIfNeeded()
    }

    func reload() {
        // TODO: Uncomment this when https://github.com/ionic-team/capacitor/pull/5630 is in the next Capacitor release
        let routesWereUpdated = federatedRouter.updateRoutesIfNeeded()
        if routesWereUpdated { webView?.reload() }
    }

}

struct Config: Decodable {
    var plugins: Plugins
    struct Plugins: Decodable {
        var federation: Federation

        enum CodingKeys: String, CodingKey {
            case federation = "Portals"
        }

        struct Federation: Decodable {
            var shell: Portal
            var apps: [Portal]
        }
    }
}
