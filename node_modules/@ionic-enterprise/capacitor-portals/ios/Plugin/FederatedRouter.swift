//
//  FederatedRouter.swift
//  Plugin
//
//  Created by Steven Sherry on 3/31/22.
//  Copyright Â© 2022 Max Lynch. All rights reserved.
//

import Capacitor
import IonicLiveUpdates

class FederatedRouter: Router {
    var routes: Portals
    var basePath = ""

    init(routes: Portals) {
        self.routes = routes
    }

    func route(for path: String) -> String {
        let pathUrl = URL(fileURLWithPath: path)
        var route: String

        let initialPath = path.dropFirst()
            .prefix { $0 != "/" }

        if let portal = routes.apps[String(initialPath)] {
            route = portal.rootPath(for: basePath) + path.dropFirst(initialPath.count + 1)
        } else if pathUrl.pathExtension.isEmpty {
            route = routes.shell.rootPath(for: basePath) + "/index.html"
        } else {
            route = routes.shell.rootPath(for: basePath) + path
        }

        return route
    }

    /// Updates the routes if needed
    /// - Returns: Returns true if routes were updated
    @discardableResult
    func updateRoutesIfNeeded() -> Bool {
        var updated = false

        if let liveUpdateConfig = routes.shell.liveUpdateConfig,
           let updatedPath = try? LiveUpdateManager.shared.latestAppDirectory(for: liveUpdateConfig.appId)?.path,
           routes.shell.updatedPath != updatedPath {

            routes.shell.updatedPath = updatedPath
            updated = true
        }

        for (appId, portal) in routes.apps {
            guard
                let liveUpdateConfig = portal.liveUpdateConfig,
                let updatedPath = try? LiveUpdateManager.shared.latestAppDirectory(for: liveUpdateConfig.appId)?.path,
                routes.apps[appId]?.updatedPath != updatedPath
            else { continue }

            routes.apps[appId]?.updatedPath = updatedPath
            updated = true
        }

        return updated
    }
}

struct Portals {
    var shell: Portal
    var apps: [String: Portal]
}

extension Portal {
    func rootPath(for basePath: String) -> String {
        if let updatedPath = updatedPath { return updatedPath }
        return "\(basePath)/\(name)"
    }
}
